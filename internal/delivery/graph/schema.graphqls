directive @auth on FIELD_DEFINITION
directive @public on FIELD_DEFINITION

# Define custom scalar types if needed
scalar DateTime
scalar Time

# Common types
type Error {
  code: Int!
  message: String!
}

type PageMetadata {
  page: Int!
  size: Int!
  totalItems: Int!
  totalPages: Int!
}

type Response {
  error: Error
  paging: PageMetadata
}

# User types
type UserResponse {
  id: ID!
  name: String!
  email: String!
  role: String!
  status: Boolean!
  createdAt: DateTime
  updatedAt: DateTime
}

input UpdateUserInput {
  email: String
  password: String
  name: String
}

# Event types
type EventResponse {
  id: Int!
  name: String!
  description: String!
  date: DateTime!
  time: Time!
  venueId: Int!
  venue: VenueResponse
}

type EventsResponse {
  data: [EventResponse!]
  paging: PageMetadata
  error: Error
}

input UpdateEventInput {
  name: String
  description: String
  date: String
  time: String
  venueId: Int
}

# Venue types
type VenueResponse {
  id: Int!
  name: String!
  address: String!
  capacity: Int!
  city: String!
  state: String!
  zip: String!
}

type VenuesResponse {
  data: [VenueResponse!]
  paging: PageMetadata
  error: Error
}

input UpdateVenueInput {
  name: String
  address: String
  capacity: Int
  city: String
  state: String
  zip: String
}

type TicketResponse {
  id: String!
  eventId: Int!
  orderId: Int
  price: Float!
  type: String!
  seatNumber: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type TicketsResponse {
  data: [TicketResponse!]
  paging: PageMetadata
  error: Error
}

input CreateTicketInput {
  eventId: Int!
  price: Float!
  type: String!
  count: Int!
}

input UpdateTicketInput {
  eventId: Int
  orderId: Int
  price: Float
  type: String
  seatNumber: String
}

type PaymentResponse {
  id: Int!
  orderId: Int!
  amount: Float!
  status: String!
}

type PaymentsResponse {
  data: [PaymentResponse!]
  paging: PageMetadata
  error: Error
}

type Query {
  # Public queries
  # Event queries
  event(id: Int!): EventResponse! @public
  events(page: Int, size: Int, sort: String, order: String): EventsResponse! @public
  searchEvents(name: String, description: String, date: String, time: String, venueId: Int, page: Int, size: Int, sort: String, order: String): EventsResponse! @public

  # Ticket queries
  ticket(id: String!): TicketResponse! @public
  tickets(page: Int = 1, size: Int = 10, sort: String, order: String): TicketsResponse! @public
  searchTickets(
    id: String
    eventId: Int
    orderId: Int
    price: Float
    type: String
    seatNumber: String
    page: Int = 1
    size: Int = 10
    sort: String
    order: String
  ): TicketsResponse! @public

  # Private queries (require authentication)
  profile: UserResponse! @auth

  # Venue queries
  venue(id: Int!): VenueResponse! @auth
  venues(page: Int = 1, size: Int = 10, sort: String, order: String): VenuesResponse! @auth
  searchVenues(
    name: String
    address: String
    capacity: Int
    city: String
    state: String
    zip: String
    page: Int = 1
    size: Int = 10
    sort: String
    order: String
  ): VenuesResponse! @auth

  # Payment queries
  payment(id: Int!): PaymentResponse! @auth
  payments(page: Int = 1, size: Int = 10, sort: String, order: String): PaymentsResponse! @auth
  searchPayments(
    id: Int
    orderId: Int
    amount: Float
    status: String
    page: Int = 1
    size: Int = 10
    sort: String
    order: String
  ): PaymentsResponse! @auth
}

type Mutation {
  # All mutations require authentication
  createEvent(
    name: String!
    description: String!
    date: String!
    time: String!
    venueId: Int!
  ): EventResponse! @auth
  updateEvent(id: Int!, input: UpdateEventInput!): EventResponse! @auth
  
  # Venue mutations
  createVenue(
    name: String!
    address: String!
    capacity: Int!
    city: String!
    state: String!
    zip: String!
  ): VenueResponse! @auth
  updateVenue(id: Int!, input: UpdateVenueInput!): VenueResponse! @auth

  # Ticket mutations
  createTicket(input: CreateTicketInput!): [TicketResponse!]! @auth
  updateTicket(id: String!, input: UpdateTicketInput!): TicketResponse! @auth
}
